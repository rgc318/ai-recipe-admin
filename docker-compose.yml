# ./docker-compose.yml
# --- 用于生产环境的前端服务独立部署文件 (优化版) ---

version: '3.8' # 推荐指定一个 compose 文件版本

services:
  frontend:
    # 镜像名称必须与 Jenkinsfile 中构建的名称完全一致
    image: rgc318/ai-recipes-frontend-antd:latest
    container_name: ai-recipes-frontend
    restart: unless-stopped

    # --- 端口映射 ---
    # 将服务器的 8080 端口映射到容器内部的 80 端口。
    # 这样您就可以通过 http://<服务器IP>:8080 来访问您的前端应用了。
    # 如果您的服务器 80 端口没有被占用，也可以直接映射为 "80:80"。
    ports:
      - "18088:80"

    # --- 文件/目录挂载 (Volumes) ---
    # 这是一个很好的实践，可以将容器内的重要文件持久化到服务器上。
    volumes:
      # 挂载 Nginx 配置文件：
      # 将服务器当前目录下的 nginx.conf 文件映射到容器内 Nginx 的配置目录。
      # 这样做的好处是，您可以随时在服务器上修改 nginx.conf 并重启容器使其生效，
      # 而无需重新构建整个 Docker 镜像。
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

      # (可选) 挂载 Nginx 日志：
      # 将容器内 Nginx 的日志文件目录映射到服务器的 logs 目录。
      # 这对于调试和监控非常有用。
      # - ./logs:/var/log/nginx

    # --- 网络定义 ---
    # 将此容器连接到名为 "shared_net" 的网络，以便与后端服务通信。
    networks:
      - ai_recipes_shared_net

# --- 外部网络定义 ---
# 定义一个名为 "shared_net" 的网络，它是一个已经存在的外部网络。
networks:
  ai_recipes_shared_net:
    external: true
    # 确保这个网络的真实名称与您在服务器上创建的名称一致。
    # (在服务器上执行: docker network create my-shared-network)
    name: ai-recipes-shared-network
